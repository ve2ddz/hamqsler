<?xml version='1.0' encoding='UTF-8'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
		 xmlns:xlink="http://www.w3.org/1999/xlink"
		 xml:id="errorhandlingandlogging">
	<title>Input Validation, Logging, and Error Handling</title>
	<para><literal>HamQSLer</literal> performs checks on user inputs, reports and recovers from 
	error conditions
	where possible, and provides a logging facility to assist both the user and the
	developers in determining what caused a specific error condition. This chapter discusses
	each of these topics. Additionally, a section is included on what the user should do to
	report a bug.</para>
	<section>
		<title>Input Validation</title>
		<para><literal>HamQSLer</literal> performs many checks on user input, from validating 
		individual characters,
		to validating the contents of input fields, and to validating multiple fields and the
		entire user input. In order to aid in a discussion of these topics, we will use
		the input QSOs dialog as an example. This discussion applies equally well everywhere
		that users provide manual input.</para>
		<para>Here is an image of the Input QSOs dialog.</para>
		<figure xml:id="inputqsosdialog">
			<title>Input QSOs Dialog Used as Validation Example</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/inputqsosdialog.png" />
				</imageobject>
			</mediaobject>
		</figure>
		<para>Some of the fields should contain a limited selection of characters.
		For example, the Callsign field should only accept unaccented letters, digits, and "/".
		Similarly, the start date and start time fields should only accept digits.
		When the user attempts to input an invalid character into a field, 
		<literal>HamQSLer</literal> causes the computer to
		emit a short beep to indicate the error. The character is not added to
		the field.</para>
		<para>You will note that some of the input fields are outlined in red.
		This indicates that the contents are invalid; for example, the callsign
		field does not contain a valid callsign. As soon as the user enters enough
		characters to represent a valid callsign, the red border will disappear.</para>
		<para>As each character is entered in a field, the entire field is checked
		for validity. The start date field is validated to ensure that it contains
		exactly 8 digits and that the date entered is between 19451101 and today. If
		a date outside this range is entered, the red border remains visible to
		indicate that the entered date is invalid.</para>
		<para>The reason that the field has been marked as invalid may be
		determined by moving the mouse cursor over the field. A tooltip describing
		the cause will be displayed. For some fields, such as the callsign, the
		tooltip may be generic ("Not a valid callsign"). For other fields where
		more specific information can be given, it is provided. For example, the
		tooltip for the start time field is "Time is not valid. Must be between
		000000 and 235959 or 0000 and 2359". When correct input is entered, the
		tooltip is not displayed.</para>
		<para>Some text fields are limited in the number of characters that they
		can accept. For example, the start date must contain exactly 8 digits. If
		the user attempts to add more digits, the computer emits a short beep, and
		the characters are not added. No other indication of an error is provided.</para>
		<para>In some cases, one of a set of fields must be entered. For example,
		each QSO must contain either a band field, a frequency field, or both.
		In the Input QSO dialog, the user can specify the band by selecting one
		of the items from the band dropdown list. The frequency may be specified
		by entering the frequency in the frequency text box. As each character is
		entered into the frequency text box, the entered value is checked to
		determine if the entered value is within one of the enumerated amateur
		radio bands. If not, the red rectangle is displayed indicating that the
		value is in error.</para>
		<para>So the user can enter either a band, or a valid frequency without
		problems. What happens if the user selects a band and then enters
		a frequency that is within a different band, or enters a valid frequency
		and then selects a different band? The field that was last changed will
		be outlined in red. The user must move the mouse cursor over that field
		to determine the cause of the problem.</para>
		<para>So why are not both the band and frequency fields outlined
		in red to indicate an error until at least one is selected? The validation
		mechanism provided in .Net (actually Windows Presentation Foundation in
		.Net) can validate only one field at a time; it is not possible to show
		an error in a different field than the one that is accepting input. So,
		if the user is entering a frequency that is not within the band that he
		has already specified, the frequency field can be marked as invalid, but
		the band field cannot. Similarly, if a frequency is entered first and then
		a different band is selected, the band field can be marked as invalid,
		but the frequency field cannot. If the program checked both fields for
		input and marked both as invalid, then when the user entered valid input
		for one of the fields, the other field would still be marked as invalid
		until a valid value was entered in that field. Because only one of band
		and frequency is required for a valid QSO, the user is not required to enter
		the second value, and the field would remain marked as invalid even
		though no value is required.</para>
		<para>You will note that the Add+ and OK buttons are disabled in the image
		above. For a QSO to be valid, it must contain a valid callsign, start date 
		and time, mode, and either band or frequency or both. As soon as these fields
		have been specified and there are no validation errors for any field, these
		buttons will be enabled to allow the user to add the QSO to the list in the
		QSOs view.</para>
		<para>A different way of handling invalid values is shown in the QSOs View.
		The Manager field must either be empty or contain a valid callsign. The contents
		of the field is obtained from the ADIF QSL_VIA field which may contain any text.
		<literal>HamQSLer</literal> requires that this field contain either a valid callsign 
		or no text.
		Therefore, the field may be marked as invalid as discussed above. However,
		<literal>HamQSLer</literal> does not require that this field be valid before the 
		program will
		print QSL cards. Instead <literal>HamQSLer</literal> simply treats the Manager field
		as empty if it does not contain only a valid callsign.</para>
	</section>
	<section>
		<title>Log File, Exceptions, Message Boxes, and Status Bar</title>
		<section>
			<title>Log File</title>
			<para><literal>HamQSLer</literal> uses a log file to save information about the program
			and its execution. When <literal>HamQSLer</literal> starts, it logs program and data 
			file version 
			information, the .Net version, operating system version, the number of processors
			on your computer and other information that may be useful in case a problem
			occurs that causes the program to malfunction. Here is an example of this
			information:</para>
			<programlisting>
			2013-06-11 11:32:19 HamQSLer started
								HamQSLer version: 1.0.2.10659
								AdifEnumerations version: 3.0.2.0
								QslBureaus version: 2.0.0.0
								CLR version: 4.0.30319.1008
								OS: Microsoft Windows NT 6.1.7601 Service Pack 1
								Processors: 2
								Culture: en-US
			</programlisting>
			<para>Whenever an error occurs as the
			result of a user action or data input, error information is written to the
			log file so that the user can determine and fix the cause of the error.
			Information about program exceptions is also normally written to the
			log file.</para>
			<para>Certain functionality in the program has debug code in it. The debug
			code writes information to the log file when a debug setting is checked
			in user preferences. It is important that you do not turn debugging on
			except when requested to do so by a developer who is attempting to debug
			a problem that you are having. Turning on debugging can cause a large
			amount of text to be written to the log file, and slows program execution
			considerably. More information is provided in the 
			<link linkend="settinguserprefs"><emphasis role='underline'>User 
			Preferences</emphasis></link> chapter.</para>
			<para>A new log file is generated each time <literal>HamQSLer</literal>
			begins execution. The log
			file is located in the <filename class='directory'>hamqsler\Logs</filename>
			subdirectory of the	user's <filename class='directory'>My Documents</filename>
			directory. This is a simple text file
			that can be opened with a text editor, or when the program is running, by
			selecting the Help => View Log File... menu item.</para>
		</section>
		<section>
			<title>Message Boxes</title>
			<para>A message box is displayed whenever there is information that the
			user must act on before the program can continue. For example, if, when
			loading a card file, an image file referenced in the file cannot be found, 
			a message box is displayed informing the user of the problem, and asking
			him if he wants to search for the image, or delete the image from the card.
			One of these actions must be chosen before the card can be loaded and
			displayed.
			If an exception occurs that causes the program to abort, a message box
			is displayed to inform the user and to ask him to report a bug in the
			program.</para>
			<para>Messages in message boxes may state that more information is
			available in the log file. The user should look there to help determine
			the cause of the problem. For example, if there is a bad field in a QSO
			record in an ADIF file that is being imported, the message box would state
			that there is a problem with one or more records and
			state that more information about the causes may be found in the log file.</para>
		</section>
		<section>
			<title>Exceptions</title>
			<para>An exception is an error in the program that causes execution of the
			current code path to be interrupted and shunted off to another location in
			the program to handle the error condition. Exceptions range from minor
			annoyances because of bad data in a file being imported by the user,
			to conditions that cause the program to abort.</para>
			<para>The following list contains some examples of where exceptions are
			generated and their effects on the program and user:</para>
			<itemizedlist spacing='compact'>
				<listitem>
					<para>If a card file contains an invalid field, a message box will
					be displayed to inform the user of the problem and redirects the
					user to the log file for more information. If the user did not edit
					the card file using a text editor, he may not be able to determine
					the actual cause of the problem or fix it. In that case, the user
					would have to file a bug report. Bug reports are discussed in a section
					below.</para>
				</listitem>
				<listitem>
					<para>A programming error or a bug in .Net may cause an unhandled
					exception to be thrown. In this case, the error information is
					written to the log file and a message box is displayed to alert
					the user that the program is about to terminate because of the
					exception. The only action the user can take is to file a bug 
					report.</para>
				</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>Status Bar</title>
			<para>The status bar is located at the bottom of the main window of the
			program. Information messages may be displayed here. Very few messages are
			actually displayed; they are used mainly to inform the user when a potentially
			long lasting process has completed. For example, after the user imports
			<filename class='directory'>QslDnP</filename> files into the 
			<filename class='directory'>hamqsler</filename> directory, the status
			message "QslDnP files have been copied and card files converted." is
			displayed.</para>
		</section>
	</section>
	<section>
		<title>Reporting Bugs</title>
		<para>To help with debugging problems, please include the following
		information when reporting a bug in <literal>HamQSLer</literal>:</para>
		<orderedlist>
			<listitem>
				<para>A description of the bug, including any error messages that
				are displayed.</para>
			</listitem>
			<listitem>
				<para>A description of what you were doing at the time that the
				problem happened, including any steps that can be used to replicate
				the problem.</para>
			</listitem>
			<listitem>
				<para>Contents of the log file. The log file is
				overwritten when you start HamQSLer, so if the program aborts, do
				not restart the program to view the log file; the log file is
				located at <filename>...\My Documents\hamqsler\Logs\hamqsler.log</filename>
				</para>
			</listitem>
			<listitem>
				<para>If the problem is with a card file, include the card file
				and the files containing any images that are included on the card.</para>
			</listitem>
			<listitem>
				<para>For printer problems, include the make and model of the printer.
				Does the problem occur when doing a print preview, or only when 
				printing?</para>
			</listitem>
			<listitem>
				<para>Any additional information that you can provide. It is always
				better to include too much information than not enough information because
				if not enough information is provided, then time is wasted asking for the
				information.</para>
			</listitem>
		</orderedlist>
	</section>
</chapter>
